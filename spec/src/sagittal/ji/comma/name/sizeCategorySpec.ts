import { Cents, Comma } from "../../../../../../src/general"
import { computeSizeCategory } from "../../../../../../src/sagittal/ji/comma/name/sizeCategory"

describe("computeSizeCategory", (): void => {
    it("returns the correct size category per the amount of cents", (): void => {
        expect(computeSizeCategory({ cents: 0 as Cents } as Comma)).toBe("u")
        expect(computeSizeCategory({ cents: 1 as Cents } as Comma)).toBe("n")
        expect(computeSizeCategory({ cents: 2 as Cents } as Comma)).toBe("s")
        expect(computeSizeCategory({ cents: 10 as Cents } as Comma)).toBe("k")
        expect(computeSizeCategory({ cents: 20 as Cents } as Comma)).toBe("C")
        expect(computeSizeCategory({ cents: 40 as Cents } as Comma)).toBe("S")
        expect(computeSizeCategory({ cents: 50 as Cents } as Comma)).toBe("M")
        expect(computeSizeCategory({ cents: 60 as Cents } as Comma)).toBe("L")
        expect(computeSizeCategory({ cents: 80 as Cents } as Comma)).toBe("SS")
        expect(computeSizeCategory({ cents: 100 as Cents } as Comma)).toBe("MS")
        expect(computeSizeCategory({ cents: 110 as Cents } as Comma)).toBe("LS")
        expect(computeSizeCategory({ cents: 115 as Cents } as Comma)).toBe("A")
        expect(computeSizeCategory({ cents: 117 as Cents } as Comma)).toBe("s+A")
        expect(computeSizeCategory({ cents: 120 as Cents } as Comma)).toBe("k+A")
        expect(computeSizeCategory({ cents: 135 as Cents } as Comma)).toBe("C+A")
        expect(computeSizeCategory({ cents: 155 as Cents } as Comma)).toBe("S+A")
        expect(computeSizeCategory({ cents: 165 as Cents } as Comma)).toBe("M+A")
        expect(computeSizeCategory({ cents: 175 as Cents } as Comma)).toBe("L+A")
        expect(computeSizeCategory({ cents: 190 as Cents } as Comma)).toBe("SS+A")
        expect(computeSizeCategory({ cents: 200 as Cents } as Comma)).toBe("MS+A")
        expect(computeSizeCategory({ cents: 220 as Cents } as Comma)).toBe("LS+A")
        expect(computeSizeCategory({ cents: 227 as Cents } as Comma)).toBe("A+A")
    })

    it("works when not abbreviated", (): void => {
        expect(computeSizeCategory({ cents: 0 as Cents } as Comma, { abbreviated: false })).toBe("unison")
        expect(computeSizeCategory({ cents: 1 as Cents } as Comma, { abbreviated: false })).toBe("schismina")
        expect(computeSizeCategory({ cents: 2 as Cents } as Comma, { abbreviated: false })).toBe("schisma")
        expect(computeSizeCategory({ cents: 10 as Cents } as Comma, { abbreviated: false })).toBe("kleisma")
        expect(computeSizeCategory({ cents: 20 as Cents } as Comma, { abbreviated: false })).toBe("Comma")
        expect(computeSizeCategory({ cents: 40 as Cents } as Comma, { abbreviated: false })).toBe("Small-Diesis")
        expect(computeSizeCategory({ cents: 50 as Cents } as Comma, { abbreviated: false })).toBe("Medium-Diesis")
        expect(computeSizeCategory({ cents: 60 as Cents } as Comma, { abbreviated: false })).toBe("Large-Diesis")
        expect(computeSizeCategory({ cents: 80 as Cents } as Comma, { abbreviated: false })).toBe("Small-Semitone")
        expect(computeSizeCategory({ cents: 100 as Cents } as Comma, { abbreviated: false })).toBe("Medium-Semitone")
        expect(computeSizeCategory({ cents: 110 as Cents } as Comma, { abbreviated: false })).toBe("Large-Semitone")
        expect(computeSizeCategory({ cents: 115 as Cents } as Comma, { abbreviated: false })).toBe("Apotome")
        expect(computeSizeCategory({ cents: 117 as Cents } as Comma, { abbreviated: false })).toBe("schisma-plus-Apotome")
        expect(computeSizeCategory({ cents: 120 as Cents } as Comma, { abbreviated: false })).toBe("kleisma-plus-Apotome")
        expect(computeSizeCategory({ cents: 135 as Cents } as Comma, { abbreviated: false })).toBe("Comma-plus-Apotome")
        expect(computeSizeCategory({ cents: 155 as Cents } as Comma, { abbreviated: false })).toBe("Small-Diesis-plus-Apotome")
        expect(computeSizeCategory({ cents: 165 as Cents } as Comma, { abbreviated: false })).toBe("Medium-Diesis-plus-Apotome")
        expect(computeSizeCategory({ cents: 175 as Cents } as Comma, { abbreviated: false })).toBe("Large-Diesis-plus-Apotome")
        expect(computeSizeCategory({ cents: 190 as Cents } as Comma, { abbreviated: false })).toBe("Small-Semitone-plus-Apotome")
        expect(computeSizeCategory({ cents: 200 as Cents } as Comma, { abbreviated: false })).toBe("Medium-Semitone-plus-Apotome")
        expect(computeSizeCategory({ cents: 220 as Cents } as Comma, { abbreviated: false })).toBe("Large-Semitone-plus-Apotome")
        expect(computeSizeCategory({ cents: 227 as Cents } as Comma, { abbreviated: false })).toBe("double-Apotome")
    })

    it("throws an error if the size category of an pitch which is too big is requested", (): void => {
        expect((): void => {
            computeSizeCategory({ cents: 230 as Cents } as Comma)
        }).toThrowError("230Â¢ is beyond the maximum size category's bounds.")
    })
})
