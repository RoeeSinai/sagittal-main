import { Name, Ratio } from "../../../../../src/general"
import { AnalyzedRationalPitch } from "../../../../../src/sagittal"
import { parseCommaName } from "../../../../../src/sagittal/comma/name"
import { SizeCategoryName } from "../../../../../src/sagittal/comma/name/types"

describe("parseCommaName", () => {
    const fiveRoughRatio = [1, 5] as Ratio

    it("works for any size category abbreviation", () => {
        expect(parseCommaName("1/5u" as Name<AnalyzedRationalPitch>))
            .toEqual({ fiveRoughRatio, sizeCategoryName: SizeCategoryName.UNISON })
        expect(parseCommaName("1/5n" as Name<AnalyzedRationalPitch>))
            .toEqual({ fiveRoughRatio, sizeCategoryName: SizeCategoryName.SCHISMINA })
        expect(parseCommaName("1/5s" as Name<AnalyzedRationalPitch>))
            .toEqual({ fiveRoughRatio, sizeCategoryName: SizeCategoryName.SCHISMA })
        expect(parseCommaName("1/5k" as Name<AnalyzedRationalPitch>))
            .toEqual({ fiveRoughRatio, sizeCategoryName: SizeCategoryName.KLEISMA })
        expect(parseCommaName("1/5C" as Name<AnalyzedRationalPitch>))
            .toEqual({ fiveRoughRatio, sizeCategoryName: SizeCategoryName.COMMA })
        expect(parseCommaName("1/5S" as Name<AnalyzedRationalPitch>))
            .toEqual({ fiveRoughRatio, sizeCategoryName: SizeCategoryName.SMALL_DIESIS })
        expect(parseCommaName("1/5M" as Name<AnalyzedRationalPitch>))
            .toEqual({ fiveRoughRatio, sizeCategoryName: SizeCategoryName.MEDIUM_DIESIS })
        expect(parseCommaName("1/5L" as Name<AnalyzedRationalPitch>))
            .toEqual({ fiveRoughRatio, sizeCategoryName: SizeCategoryName.LARGE_DIESIS })
        expect(parseCommaName("1/5SS" as Name<AnalyzedRationalPitch>))
            .toEqual({ fiveRoughRatio, sizeCategoryName: SizeCategoryName.SMALL_SEMITONE })
        expect(parseCommaName("1/5MS" as Name<AnalyzedRationalPitch>))
            .toEqual({ fiveRoughRatio, sizeCategoryName: SizeCategoryName.MEDIUM_SEMITONE })
        expect(parseCommaName("1/5LS" as Name<AnalyzedRationalPitch>))
            .toEqual({ fiveRoughRatio, sizeCategoryName: SizeCategoryName.LARGE_SEMITONE })
        expect(parseCommaName("1/5A" as Name<AnalyzedRationalPitch>))
            .toEqual({ fiveRoughRatio, sizeCategoryName: SizeCategoryName.APOTOME })
        expect(parseCommaName("1/5s+A" as Name<AnalyzedRationalPitch>))
            .toEqual({ fiveRoughRatio, sizeCategoryName: SizeCategoryName.SCHISMA_PLUS_APOTOME })
        expect(parseCommaName("1/5k+A" as Name<AnalyzedRationalPitch>))
            .toEqual({ fiveRoughRatio, sizeCategoryName: SizeCategoryName.KLEISMA_PLUS_APOTOME })
        expect(parseCommaName("1/5C+A" as Name<AnalyzedRationalPitch>))
            .toEqual({ fiveRoughRatio, sizeCategoryName: SizeCategoryName.COMMA_PLUS_APOTOME })
        expect(parseCommaName("1/5S+A" as Name<AnalyzedRationalPitch>))
            .toEqual({ fiveRoughRatio, sizeCategoryName: SizeCategoryName.SMALL_DIESIS_PLUS_APOTOME })
        expect(parseCommaName("1/5M+A" as Name<AnalyzedRationalPitch>))
            .toEqual({ fiveRoughRatio, sizeCategoryName: SizeCategoryName.MEDIUM_DIESIS_PLUS_APOTOME })
        expect(parseCommaName("1/5L+A" as Name<AnalyzedRationalPitch>))
            .toEqual({ fiveRoughRatio, sizeCategoryName: SizeCategoryName.LARGE_DIESIS_PLUS_APOTOME })
        expect(parseCommaName("1/5SS+A" as Name<AnalyzedRationalPitch>))
            .toEqual({ fiveRoughRatio, sizeCategoryName: SizeCategoryName.SMALL_SEMITONE_PLUS_APOTOME })
        expect(parseCommaName("1/5MS+A" as Name<AnalyzedRationalPitch>))
            .toEqual({ fiveRoughRatio, sizeCategoryName: SizeCategoryName.MEDIUM_SEMITONE_PLUS_APOTOME })
        expect(parseCommaName("1/5LS+A" as Name<AnalyzedRationalPitch>))
            .toEqual({ fiveRoughRatio, sizeCategoryName: SizeCategoryName.LARGE_SEMITONE_PLUS_APOTOME })
        expect(parseCommaName("1/5A+A" as Name<AnalyzedRationalPitch>))
            .toEqual({ fiveRoughRatio, sizeCategoryName: SizeCategoryName.DOUBLE_APOTOME })
    })

    it("works for any size category name", () => {
        expect(parseCommaName("1/5-unison" as Name<AnalyzedRationalPitch>))
            .toEqual({ fiveRoughRatio, sizeCategoryName: SizeCategoryName.UNISON })
        expect(parseCommaName("1/5-schismina" as Name<AnalyzedRationalPitch>))
            .toEqual({ fiveRoughRatio, sizeCategoryName: SizeCategoryName.SCHISMINA })
        expect(parseCommaName("1/5-schisma" as Name<AnalyzedRationalPitch>))
            .toEqual({ fiveRoughRatio, sizeCategoryName: SizeCategoryName.SCHISMA })
        expect(parseCommaName("1/5-kleisma" as Name<AnalyzedRationalPitch>))
            .toEqual({ fiveRoughRatio, sizeCategoryName: SizeCategoryName.KLEISMA })
        expect(parseCommaName("1/5-Comma" as Name<AnalyzedRationalPitch>))
            .toEqual({ fiveRoughRatio, sizeCategoryName: SizeCategoryName.COMMA })
        expect(parseCommaName("1/5-Small-Diesis" as Name<AnalyzedRationalPitch>))
            .toEqual({ fiveRoughRatio, sizeCategoryName: SizeCategoryName.SMALL_DIESIS })
        expect(parseCommaName("1/5-Medium-Diesis" as Name<AnalyzedRationalPitch>))
            .toEqual({ fiveRoughRatio, sizeCategoryName: SizeCategoryName.MEDIUM_DIESIS })
        expect(parseCommaName("1/5-Large-Diesis" as Name<AnalyzedRationalPitch>))
            .toEqual({ fiveRoughRatio, sizeCategoryName: SizeCategoryName.LARGE_DIESIS })
        expect(parseCommaName("1/5-Small-Semitone" as Name<AnalyzedRationalPitch>))
            .toEqual({ fiveRoughRatio, sizeCategoryName: SizeCategoryName.SMALL_SEMITONE })
        expect(parseCommaName("1/5-Medium-Semitone" as Name<AnalyzedRationalPitch>))
            .toEqual({ fiveRoughRatio, sizeCategoryName: SizeCategoryName.MEDIUM_SEMITONE })
        expect(parseCommaName("1/5-Large-Semitone" as Name<AnalyzedRationalPitch>))
            .toEqual({ fiveRoughRatio, sizeCategoryName: SizeCategoryName.LARGE_SEMITONE })
        expect(parseCommaName("1/5-Apotome" as Name<AnalyzedRationalPitch>))
            .toEqual({ fiveRoughRatio, sizeCategoryName: SizeCategoryName.APOTOME })
        expect(parseCommaName("1/5-schisma-plus-Apotome" as Name<AnalyzedRationalPitch>))
            .toEqual({ fiveRoughRatio, sizeCategoryName: SizeCategoryName.SCHISMA_PLUS_APOTOME })
        expect(parseCommaName("1/5-kleisma-plus-Apotome" as Name<AnalyzedRationalPitch>))
            .toEqual({ fiveRoughRatio, sizeCategoryName: SizeCategoryName.KLEISMA_PLUS_APOTOME })
        expect(parseCommaName("1/5-Comma-plus-Apotome" as Name<AnalyzedRationalPitch>))
            .toEqual({ fiveRoughRatio, sizeCategoryName: SizeCategoryName.COMMA_PLUS_APOTOME })
        expect(parseCommaName("1/5-Small-Diesis-plus-Apotome" as Name<AnalyzedRationalPitch>))
            .toEqual({ fiveRoughRatio, sizeCategoryName: SizeCategoryName.SMALL_DIESIS_PLUS_APOTOME })
        expect(parseCommaName("1/5-Medium-Diesis-plus-Apotome" as Name<AnalyzedRationalPitch>))
            .toEqual({ fiveRoughRatio, sizeCategoryName: SizeCategoryName.MEDIUM_DIESIS_PLUS_APOTOME })
        expect(parseCommaName("1/5-Large-Diesis-plus-Apotome" as Name<AnalyzedRationalPitch>))
            .toEqual({ fiveRoughRatio, sizeCategoryName: SizeCategoryName.LARGE_DIESIS_PLUS_APOTOME })
        expect(parseCommaName("1/5-Small-Semitone-plus-Apotome" as Name<AnalyzedRationalPitch>))
            .toEqual({ fiveRoughRatio, sizeCategoryName: SizeCategoryName.SMALL_SEMITONE_PLUS_APOTOME })
        expect(parseCommaName("1/5-Medium-Semitone-plus-Apotome" as Name<AnalyzedRationalPitch>))
            .toEqual({ fiveRoughRatio, sizeCategoryName: SizeCategoryName.MEDIUM_SEMITONE_PLUS_APOTOME })
        expect(parseCommaName("1/5-Large-Semitone-plus-Apotome" as Name<AnalyzedRationalPitch>))
            .toEqual({ fiveRoughRatio, sizeCategoryName: SizeCategoryName.LARGE_SEMITONE_PLUS_APOTOME })
        expect(parseCommaName("1/5-double-Apotome" as Name<AnalyzedRationalPitch>))
            .toEqual({ fiveRoughRatio, sizeCategoryName: SizeCategoryName.DOUBLE_APOTOME })
    })
})
